import numpy as np
%matplotlib inline
import matplotlib.image as mpimg
import matplotlib.pyplot as plt
#-------------------------------------

import keras
import tensorflow as tf
tf.compat.v1.set_random_seed(2)

#---------------------------------------

model = tf.keras.Sequential([   #tf.keras.models.Sequential
    # Note the input shape is the desired size of the image 150x150 with 3 bytes color
    tf.keras.layers.Conv2D(100, (3,3), activation='relu', input_shape=(150,150,3)),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Conv2D(200, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2), 
    tf.keras.layers.Conv2D(300, (3,3), activation='relu'), 
    tf.keras.layers.MaxPooling2D(2,2),
   
    # Flatten the results to feed into a DNN
    tf.keras.layers.Flatten(), 
    # 512 neuron hidden layer
    tf.keras.layers.Dense(512, activation='relu'), 
    tf.keras.layers.Dropout(0.1, seed=2),
    tf.keras.layers.Dense(200, activation='relu'),
    tf.keras.layers.Dropout(0.2, seed=2),
    # Only 1 output neuron. It will contain a value from 0-1 where 0 for 1 class ('Organic') 
    # and 1 for the other ('Recycled')
    tf.keras.layers.Dense(2, activation='softmax')  
])
#----------------------------------------------------

model.summary()

#--------------------------------------------

from tensorflow.keras.optimizers import RMSprop

model.compile(optimizer=RMSprop(lr=0.001),
              loss='categorical_crossentropy',
              metrics = ['acc'])

#-----------------------------------------------

train_dir = "\Data"
validation_dir = "\Data"
from tensorflow.keras.preprocessing.image import ImageDataGenerator

# All images will be rescaled by 1./255.
train_datagen = ImageDataGenerator( rescale = 1.0/255. )
test_datagen  = ImageDataGenerator( rescale = 1.0/255. )

# --------------------
# Flow training images in batches of 20 using train_datagen generator
# --------------------
train_generator = train_datagen.flow_from_directory(train_dir,
                                                    batch_size=20,
                                                    class_mode='categorical',
                                                    target_size=(150, 150))     
# --------------------
# Flow validation images in batches of 20 using test_datagen generator
# --------------------
validation_generator =  test_datagen.flow_from_directory(validation_dir,
                                                         batch_size=20,
                                                         class_mode  = 'categorical',
                                                         target_size = (150, 150))




#-------------------------------------------------------------------------------------------

history = model.fit_generator(train_generator,
                              validation_data=validation_generator,
                              steps_per_epoch=50,
                              epochs=4,
                              validation_steps=50,
                              verbose=1)

#--------------------------------------------------------------

#from keras.models import load_model
#model = load_model('brain.h5')
import cv2
import numpy as np

img = cv2.imread('yes.png')
img = cv2.resize(img,(150,150))
img = np.reshape(img,[1,150,150,3])
#print(classes)

classes = model.predict_classes(img)

if classes==1:
    print("Has a Brain Tumor.")
else:
    print("No Brain Tumor Detected.")
    
#-------------------------------------------------

plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('Model Loss')
plt.ylabel('Loss')
plt.xlabel('Epochs')
plt.legend(['Loss', 'Val_Loss'])
plt.show()

#------------------------------------------------

from matplotlib import pyplot as plt
import cv2

img = cv2.imread('yes.png')
gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

plt.imshow(gray)
plt.title('my picture')
plt.show()

#-------------------------------------------------

from matplotlib import pyplot as plt
%matplotlib inline
import numpy as np
import cv2

img = cv2.imread('yes.png')
img2 = img[:,:,::-1]
plt.imshow(img2)

#-----------------------------------------------


#from keras.models import load_model
#model = load_model('brain.h5')

import cv2
import numpy as np

from tkinter import *
from tkinter import ttk
from tkinter import filedialog
from PIL import Image
from PIL import ImageTk
from PIL import ImageFilter
import sys
import calendar
import time
import datetime as dt
gui = Tk()
#gui["bg"] = "black"
#gui.geometry("700x700")
pad=1
gui.geometry("{0}x{1}+0+0".format(gui.winfo_screenwidth()-pad, gui.winfo_screenheight()-pad))

gui.title("Brain Tumor Detector")

#-----------------------------------------------------------------------------------------
def resize_image(event):
    new_width = event.width
    new_height = event.height

    image = copy_of_image.resize((new_width, new_height))
    photo = ImageTk.PhotoImage(image)

    label.config(image=photo)
    label.image = photo  # avoid garbage collection
    
frame = Frame(gui, relief='raised', borderwidth=2)
#frame.pack(fill=BOTH, expand=YES)
frame.pack_propagate(False)

copy_of_image = Image.open("sss.jpg")
photo = ImageTk.PhotoImage(copy_of_image)

#label = Label(frame, image=photo)
#label.place(x=0, y=0, relwidth=1, relheight=1)
#label.bind('<Configure>', resize_image)

center_frame = Frame(frame, relief='raised', borderwidth=2)
center_frame.place(relx=0.5, rely=0.5, anchor=CENTER)    
    





#---------------------------------------------------------------------------------------
def getFolderPath():
    
    
    folder_selected=filedialog.askopenfilename(filetypes=[("Image File",('.jpg','.png','.jpeg','.tif'))])
    im = Image.open(folder_selected)
    
    folderPath.set(folder_selected)
    newsize=(250,270)
    im = im.resize(newsize)
    tkimage = ImageTk.PhotoImage(im)
    myvar=Label(gui,image = tkimage).place(x=15,y=330,width=250, height=270)
    myvar1=Label(gui,text = "Gray-Scale Image (MRI).",font=(10),fg="brown").place(x=15,y=325,width=250)
    #myvar.image = tkimage
    #myvar.pack()
    
    
    im = cv2.imread(folder_selected)
   
    
    gray = cv2.cvtColor(im, cv2.COLOR_BGR2HSV) 
    gray = Image.fromarray(gray)
    gray = ImageTk.PhotoImage(gray)
    
    myvar2=Label(gui,image = gray).place(x=345,y=330,width=300, height=340)
    myvar3=Label(gui,text="HSV Processed Image.",font=(10),fg="brown").place(x=345,y=325,width=300)
    myvar2.image = gray
    myvar2.pack(side="right", padx=10, pady=10)
    
    



    

def doStuff():
    folder = folderPath.get()
    #print("Doing stuff with folder", folder)
    img = cv2.imread(folder)
    img = cv2.resize(img,(150,150))
    img = np.reshape(img,[1,150,150,3])
    

    classes = model.predict_classes(img)
    #xx=Label(gui,text="", font=("Times New Roman",32,"bold"),fg="")
    #xx.place(x=825,y = 450)
    
    

    if classes==1:
        xx=Label(gui,text="Brain Tumor is \n Detected !!", font=("Times New Roman",29,"bold"),fg="red")
        xx.place(x=825,y = 450)
        
    else:
        yy=Label(gui,text="No Brain Tumor\nDetected.", font=("Times New Roman",28,"bold"),fg="green")
        yy.place(x=825,y = 455)
        



    #--------------------------------------------------------------------------------------------------
folderPath = StringVar()

logo= Image.open('logo.png')
size=(200,175)
logo= logo.resize(size)
logo=ImageTk.PhotoImage(logo)
logo_label=Label(gui,image=logo).place(x=55,y=1)

Heading = Label(gui,text="Brain Tumor Classification using \nConvolutional Neural Networks .", font=("Times New Roman",40,"bold"),fg="red",anchor="center")
Heading.place(x=308,y = 0)

#footer = Label(gui,text="Project for TPCT`s CSE Dept,Osmanabad.   \nPresented by Sheikh shahabaj, Bhujbal onkar & Dangat vaibhav  2019-20.", font=("Times New Roman",18,"bold"),fg="blue",anchor="center")
#footer.place(x=308,y = 116)


#---------------------------------------------------------------------------------------------------------
counter = 0 
def counter_label(label):
    def count():
        global counter
        counter += 1
        label.config(text="Time Elapsed : "+str(counter)+" Seconds .",font=("Times New Roman",13),anchor="se")
        label.after(1000, count)
    count()
label = Label(gui,fg="green")
label.place(x=1150,y = 0)
#label.pack()
counter_label(label)
#------------------------------------------------------------------------------------------------

class Clock(Label):
    """ Class that contains the clock widget and clock refresh """

    def __init__(self, parent=None, seconds=True, colon=False):
        """
        Create and place the clock widget into the parent element
        It's an ordinary Label element with two additional features.
        """
        Label.__init__(self, parent)

        self.display_seconds = seconds
        if self.display_seconds:
            self.time     = time.strftime('%I:%M:%S %p')
        else:
            self.time     = time.strftime('%I:%M:%S %p').lstrip('0')
        self.display_time = self.time
        self.configure(text=self.display_time)

        if colon:
            self.blink_colon()

        self.after(200, self.tick)


    def tick(self):
        """ Updates the display clock every 200 milliseconds """
        if self.display_seconds:
            new_time = time.strftime('%I:%M:%S %p')
        else:
            new_time = time.strftime('%I:%M:%S %p').lstrip('0')
        if new_time != self.time:
            self.time = new_time
            self.display_time = self.time
            self.config(text=self.display_time)
        self.after(200, self.tick)


    def blink_colon(self):
        """ Blink the colon every second """
        if ':' in self.display_time:
            self.display_time = self.display_time.replace(':',' ')
        else:
            self.display_time = self.display_time.replace(' ',':',1)
        self.config(text=self.display_time)
        self.after(1000, self.blink_colon)





clock1 = Clock(gui)
#clock1.pack()
clock1.configure(fg='white',font=("helvetica",125))
date = dt.datetime.now()
format_date = f"{date:%a, %b %d %Y}"
w = Label(gui, text=f"{dt.datetime.now():%a, %b %d %Y}", fg="green",  font=("Times", 14))
w.place(x=1167,y = 23)
#w.pack()
#-------------------------------------------------------------------------------------------------
a = Label(gui ,text="Enter name",font=("bold"))
a.place(x=12,y = 180)
E = Entry(gui,textvariable=folderPath)
E.place(x=100,y=182)
btnFind = ttk.Button(gui, text="Browse Folder",width=20,command=getFolderPath)
btnFind.place(x=230,y=180)

c = ttk.Button(gui ,text="Find",width=13,command=doStuff)
c.place(x=12,y=210)
gui.mainloop()


#-------------------------------------------------------------------------------